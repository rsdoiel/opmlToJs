<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Mon, 18 Jan 2021 15:32:57 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: opmlToJs</title>
		<dateCreated>Sun, 18 Jun 2017 16:01:51 GMT</dateCreated>
		<dateModified>Mon, 18 Jan 2021 15:32:57 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 11, 14, 20, 23, 56, 57, 58, 72, 73, 74, 88</expansionState>
		<vertScrollState>26</vertScrollState>
		<windowTop>288</windowTop>
		<windowLeft>1151</windowLeft>
		<windowBottom>1396</windowBottom>
		<windowRight>2445</windowRight>
		</head>
	<body>
		<outline text="/fargo.io/code/shared/opmltojs/">
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;opmltojs&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Pass in some OPML text, get back a JavaScript object.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.10&quot;,"/>
					<outline text="&quot;main&quot;: &quot;opmltojs.js&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot;: &quot;git&quot;,"/>
						<outline text="&quot;url&quot;: &quot;https://github.com/scripting/opmlToJs.git&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;opmltojs.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;xml2js&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="opmltojs.js">
				<outline text="var myProductName = &quot;opmltojs&quot;; myVersion = &quot;0.4.10&quot;;"/>
				<outline text=""/>
				<outline text="/*  The MIT License (MIT)">
					<outline text="Copyright (c) 2014-2021 Dave Winer"/>
					<outline text=""/>
					<outline text="Permission is hereby granted, free of charge, to any person obtaining a copy"/>
					<outline text="of this software and associated documentation files (the &quot;Software&quot;), to deal"/>
					<outline text="in the Software without restriction, including without limitation the rights"/>
					<outline text="to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"/>
					<outline text="copies of the Software, and to permit persons to whom the Software is"/>
					<outline text="furnished to do so, subject to the following conditions:"/>
					<outline text=""/>
					<outline text="The above copyright notice and this permission notice shall be included in all"/>
					<outline text="copies or substantial portions of the Software."/>
					<outline text=""/>
					<outline text="THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"/>
					<outline text="IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"/>
					<outline text="FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"/>
					<outline text="AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"/>
					<outline text="LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"/>
					<outline text="OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"/>
					<outline text="SOFTWARE."/>
					<outline text="*/"/>
					</outline>
				<outline text=""/>
				<outline text="exports.parse = parse; "/>
				<outline text="exports.opmlify = opmlify; //8/6/17 by DW"/>
				<outline text="exports.visitSubs = visitSubs; //8/12/17 by DW"/>
				<outline text="exports.parseWithError = parseWithError; //4/18/20 by DW"/>
				<outline text=""/>
				<outline text="const xml2js = require (&quot;xml2js&quot;);"/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);" isComment="true"/>
				<outline text=""/>
				<outline text="function isScalar (obj) {">
					<outline text="if (typeof (obj) == &quot;object&quot;) {">
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (true);"/>
					<outline text="}"/>
					</outline>
				<outline text="function visitSubs (subs, visit) { //8/12/17 by DW">
					<outline text="if (subs !== undefined) {">
						<outline text="for (var i = 0; i &lt; subs.length; i++) {">
							<outline text="let sub = subs [i];"/>
							<outline text="if (!visit (sub)) {">
								<outline text="return (false);"/>
								<outline text="}"/>
								</outline>
							<outline text="if (sub.subs !== undefined) {">
								<outline text="if (!visitSubs (sub.subs, visit)) {">
									<outline text="return (false);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (true); //keep going"/>
					<outline text="}"/>
					</outline>
				<outline text="function parseWithError (opmltext, callback) { //4/18/20 by DW">
					<outline text="Changes" isComment="true">
						<outline text="1/18/21; 10:21:27 AM by DW">
							<outline text="I created an OPML format that added a &quot;subs&quot; attribute to each headline that had subs. This was an error, but was still valid OPML, but it caused this code to fail, because subs was the wrong type. It is always a mistake, if it's possible that your OPML will be converted to a JS object. So I protected against it here, and don't copy an attribute called subs if it's present. It's possible that this fix could cause problems too, btw. The code is in Old School, look for saveDayInOpml. "/>
							</outline>
						<outline text="4/18/20; 5:43:20 PM by DW">
							<outline text="Changed the callback to return the standard format, with an err first, and theOutline second. "/>
							<outline text="I didn't want to break all the apps that use this as it was configured, but in the future, use this entry point not the one without the error."/>
							</outline>
						</outline>
					<outline text="function addGenerator (theOpml) { //follow the example of RSS 2.0">
						<outline text="try {">
							<outline text="theOpml.head.generator = myProductName + &quot; v&quot; + myVersion;"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function convert (sourcestruct, deststruct) {">
						<outline text="var atts = sourcestruct [&quot;$&quot;];"/>
						<outline text="if (atts !== undefined) {">
							<outline text="for (var x in atts) {">
								<outline text="if (x != &quot;subs&quot;) { //1/18/21 by DW">
									<outline text="deststruct [x] = atts [x];"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="delete sourcestruct [&quot;$&quot;];"/>
							<outline text="}"/>
							</outline>
						<outline text="for (var x in sourcestruct) {">
							<outline text="var obj = sourcestruct [x];"/>
							<outline text="if (isScalar (obj)) {">
								<outline text="deststruct [x] = obj;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (x == &quot;outline&quot;) {">
									<outline text="if (deststruct.subs === undefined) {">
										<outline text="deststruct.subs = new Array ();"/>
										<outline text="}"/>
										</outline>
									<outline text="if (Array.isArray (obj)) {">
										<outline text="for (var i = 0; i &lt; obj.length; i++) {">
											<outline text="var newobj = new Object ();"/>
											<outline text="convert (obj [i], newobj);"/>
											<outline text="deststruct.subs.push (newobj);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var newobj = new Object ();"/>
										<outline text="convert (obj, newobj);"/>
										<outline text="deststruct.subs.push (newobj);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="deststruct [x] = new Object ();"/>
									<outline text="convert (obj, deststruct [x]);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="var options = {">
						<outline text="explicitArray: false"/>
						<outline text="};"/>
						</outline>
					<outline text="xml2js.parseString (opmltext, options, function (err, jstruct) {">
						<outline text="if (err) { //4/18/20 by DW">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="var theOutline = {">
								<outline text="opml: new Object ()"/>
								<outline text="}"/>
								</outline>
							<outline text="convert (jstruct.opml, theOutline.opml);"/>
							<outline text="addGenerator (theOutline.opml); //8/6/17 by DW"/>
							<outline text="if (isScalar (theOutline.opml.head)) { //8/6/17 by DW">
								<outline text="theOutline.opml.head = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="if (isScalar (theOutline.opml.body)) { //8/6/17 by DW">
								<outline text="theOutline.opml.body = new Object ();"/>
								<outline text="}"/>
								</outline>
							<outline text="callback (undefined, theOutline);"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function parse (opmltext, callback) {">
					<outline text="parseWithError (opmltext, function (err, theOutline) {">
						<outline text="callback (theOutline);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function parse (opmltext, callback) {" isComment="true">
					<outline text="function addGenerator (theOpml) { //follow the example of RSS 2.0">
						<outline text="try {">
							<outline text="theOpml.head.generator = myProductName + &quot; v&quot; + myVersion;"/>
							<outline text="}"/>
							</outline>
						<outline text="catch (err) {">
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function convert (sourcestruct, deststruct) {">
						<outline text="var atts = sourcestruct [&quot;$&quot;];"/>
						<outline text="if (atts !== undefined) {">
							<outline text="for (var x in atts) {">
								<outline text="deststruct [x] = atts [x];"/>
								<outline text="}"/>
								</outline>
							<outline text="delete sourcestruct [&quot;$&quot;];"/>
							<outline text="}"/>
							</outline>
						<outline text="for (var x in sourcestruct) {">
							<outline text="var obj = sourcestruct [x];"/>
							<outline text="if (isScalar (obj)) {">
								<outline text="deststruct [x] = obj;"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="if (x == &quot;outline&quot;) {">
									<outline text="if (deststruct.subs === undefined) {">
										<outline text="deststruct.subs = new Array ();"/>
										<outline text="}"/>
										</outline>
									<outline text="if (Array.isArray (obj)) {">
										<outline text="for (var i = 0; i &lt; obj.length; i++) {">
											<outline text="var newobj = new Object ();"/>
											<outline text="convert (obj [i], newobj);"/>
											<outline text="deststruct.subs.push (newobj);"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var newobj = new Object ();"/>
										<outline text="convert (obj, newobj);"/>
										<outline text="deststruct.subs.push (newobj);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="deststruct [x] = new Object ();"/>
									<outline text="convert (obj, deststruct [x]);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="var options = {">
						<outline text="explicitArray: false"/>
						<outline text="};"/>
						</outline>
					<outline text="xml2js.parseString (opmltext, options, function (err, jstruct) {">
						<outline text="console.log (utils.jsonStringify (jstruct));" isComment="true"/>
						<outline text="var theOutline = {">
							<outline text="opml: new Object ()"/>
							<outline text="}"/>
							</outline>
						<outline text="convert (jstruct.opml, theOutline.opml);"/>
						<outline text="addGenerator (theOutline.opml); //8/6/17 by DW"/>
						<outline text="if (isScalar (theOutline.opml.head)) { //8/6/17 by DW">
							<outline text="theOutline.opml.head = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (isScalar (theOutline.opml.body)) { //8/6/17 by DW">
							<outline text="theOutline.opml.body = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="callback (theOutline);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function opmlify (theOutline, fname) { //returns the opmltext for the outline -- 8/6/17 by DW">
					<outline text="var opmltext = &quot;&quot;, indentlevel = 0;"/>
					<outline text="function add (s) {">
						<outline text="opmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;" created="Wed, 19 Jun 2013 18:22:33 GMT" pgfnum="26661"/>
						<outline text="}"/>
						</outline>
					<outline text="function addSubs (subs) {">
						<outline text="if (subs !== undefined) {">
							<outline text="for (var i = 0; i &lt; subs.length; i++) {">
								<outline text="let sub = subs [i], atts = &quot;&quot;;"/>
								<outline text="for (var x in sub) {" created="Sat, 09 Aug 2014 15:39:38 GMT" pgfnum="43186">
									<outline text="if (x != &quot;subs&quot;) {">
										<outline text="atts += &quot; &quot; + x + &quot;=\&quot;&quot; + utils.encodeXml (sub [x]) + &quot;\&quot;&quot;;" created="Sat, 09 Aug 2014 15:40:19 GMT" pgfnum="43192"/>
										<outline text="}"/>
										</outline>
									<outline text="}" created="Sat, 09 Aug 2014 15:39:43 GMT" pgfnum="43187"/>
									</outline>
								<outline text="if (sub.subs === undefined) {">
									<outline text="add (&quot;&lt;outline&quot; + atts + &quot; /&gt;&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="add (&quot;&lt;outline&quot; + atts + &quot; &gt;&quot;); indentlevel++;"/>
									<outline text="addSubs (sub.subs);"/>
									<outline text="add (&quot;&lt;/outline&gt;&quot;); indentlevel--;"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;ISO-8859-1\&quot;?&gt;&quot;);"/>
					<outline text="add (&quot;&lt;opml version=\&quot;2.0\&quot;&gt;&quot;); indentlevel++;"/>
					<outline text="//do head section">
						<outline text="add (&quot;&lt;head&gt;&quot;); indentlevel++;"/>
						<outline text="for (var x in theOutline.opml.head) {">
							<outline text="add (&quot;&lt;&quot; + x + &quot;&gt;&quot; + theOutline.opml.head [x] + &quot;&lt;/&quot; + x + &quot;&gt;&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="add (&quot;&lt;/head&gt;&quot;); indentlevel--;"/>
						</outline>
					<outline text="//do body section">
						<outline text="add (&quot;&lt;body&gt;&quot;); indentlevel++;"/>
						<outline text="addSubs (theOutline.opml.body.subs);"/>
						<outline text="add (&quot;&lt;/body&gt;&quot;); indentlevel--;"/>
						</outline>
					<outline text="add (&quot;&lt;/opml&gt;&quot;); indentlevel--;"/>
					<outline text="console.log (&quot;opmlify: opmltext == \n&quot; + opmltext);" isComment="true"/>
					<outline text="return (opmltext);"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="examples/readstates/read.js">
				<outline text="const opmlToJs = require (&quot;opmltojs&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="var urlOpmlFile = &quot;http://hosting.opml.org/dave/spec/states.opml&quot;;"/>
				<outline text="var urlOpmlFile = &quot;http://this.how/electricRiver/?format=opml&quot;;" isComment="true"/>
				<outline text="request (urlOpmlFile, function (err, response, data) {">
					<outline text="opmlToJs.parse (data, function (theOutline) {">
						<outline text="if (err) {">
							<outline text="console.log (err.message);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="console.log (JSON.stringify (theOutline, undefined, 4));"/>
							<outline text="fs.writeFile (&quot;states.json&quot;, JSON.stringify (theOutline, undefined, 4))"/>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="});"/>
					</outline>
				</outline>
			<outline text="examples/readstates/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;readstates&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;main&quot;: &quot;read.js&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;opmltojs&quot;: &quot;*&quot;,"/>
						<outline text="&quot;request&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="readme.md">
				<outline text="## opmlToJs package"/>
				<outline text="### How to install"/>
				<outline text="`npm install opmltojs`"/>
				<outline text="### The story">
					<outline text="opmlToJs makes it easy to read and write OPML files in Node apps. "/>
					<outline text="The basic idea: Pass in some OPML text, get back a JavaScript object. And the other way works too. "/>
					<outline text="It builds on &lt;a href=&quot;https://github.com/Leonidas-from-XIV/node-xml2js&quot;&gt;xml2Js&lt;/a&gt;."/>
					<outline text="Note this package does not expand OPML includes. "/>
					<outline text="See the &lt;a href=&quot;https://github.com/scripting/opmlToJs/tree/master/examples/readstates&quot;&gt;readstates&lt;/a&gt; app for an example of how to call it. "/>
					<outline text="A blog post &lt;a href=&quot;http://scripting.com/2017/08/07.html#a093801&quot;&gt;announcing&lt;/a&gt; opmlToJs."/>
					</outline>
				<outline text="### Updates">
					<outline text="##### v0.4.8 -- 8/12/16 by DW">
						<outline text="Added new exported function &lt;i&gt;visitSubs.&lt;/i&gt; I had to write this for an app I'm working on, but it seemed it should be part of this package. "/>
						</outline>
					<outline text="##### v0.4.5 -- 8/4/16 by DW">
						<outline text="Added new exported function opmlify. It turns an outline structure returned by opmltojs.parse into the equivalent OPML text. It's the other side of parsing, serializing. "/>
						<outline text="Improved the example program, used the canonical example OPML file to test with. It is in its own folder with its own package.json file, so it's a better model of how an app might use the package. "/>
						<outline text="Add a &lt;i&gt;generator&lt;/i&gt; element to the head section after we parse the OPML text, following the &lt;a href=&quot;http://cyber.harvard.edu/rss/rss.html#optionalChannelElements&quot;&gt;example&lt;/a&gt; of RSS 2.0. "/>
						<outline text="Commented some debugging code. "/>
						</outline>
					</outline>
				</outline>
			</outline>
		<outline text="/dev.opml.org/json/" isComment="true">
			<outline text="code.js">
				<outline text="var appConsts = {">
					<outline text="domain: &quot;dev.opml.org&quot;,"/>
					<outline text="docs: &quot;http://scripting.com/2016/10/11/convertOpmlToJson.html&quot;,"/>
					<outline text="version: &quot;0.41b&quot;" created="Fri, 04 Jan 2013 22:12:08 GMT" pgfnum="16702"/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="function everySecond () {">
					<outline text="localStorage.urlOpmlFile = $(&quot;#idUrl&quot;).val ();"/>
					<outline text="}"/>
					</outline>
				<outline text="function outlineToJson (adrx) { //convert an &lt;outline&gt; to a JSON object">
					<outline text="var theOutline = new Object ();"/>
					<outline text="xmlGatherAttributes (adrx, theOutline);"/>
					<outline text="if (xmlHasSubs (adrx)) {">
						<outline text="theOutline.subs = [];"/>
						<outline text="$(adrx).children (&quot;outline&quot;).each (function () {">
							<outline text="theOutline.subs [theOutline.subs.length] = outlineToJson (this);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="return (theOutline);"/>
					<outline text="}"/>
					</outline>
				<outline text="function viewJson (url) {">
					<outline text="$(&quot;#idJsonView&quot;).html (&quot;&quot;);"/>
					<outline text="readHttpFileThruProxy (url, undefined, function (opmltext) {">
						<outline text="var theOutline = new Object ();"/>
						<outline text=""/>
						<outline text="var xstruct = $($.parseXML (opmltext));"/>
						<outline text="var adropml = xmlGetAddress (xstruct, &quot;opml&quot;);" created="Wed, 30 Oct 2013 17:54:25 GMT" pgfnum="30678"/>
						<outline text="var adrhead = xmlGetAddress (adropml, &quot;head&quot;);" created="Wed, 30 Oct 2013 17:54:25 GMT" pgfnum="30678"/>
						<outline text=""/>
						<outline text="theOutline.head = xmlGetSubValues (adrhead);"/>
						<outline text=""/>
						<outline text="var adrbody = xmlGetAddress (adropml, &quot;body&quot;);" created="Wed, 30 Oct 2013 17:54:25 GMT" pgfnum="30678"/>
						<outline text="var container = outlineToJson (adrbody, &quot;outline&quot;);"/>
						<outline text="theOutline.body = container.subs;"/>
						<outline text=""/>
						<outline text="$(&quot;#idJsonView&quot;).html (&quot;&lt;pre&gt;&quot; + jsonStringify (theOutline) + &quot;&lt;/pre&gt;&quot;);"/>
						<outline text="$(&quot;#idJsonView&quot;).css (&quot;display&quot;, &quot;block&quot;);"/>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function convertOpmlFile () {">
					<outline text="viewJson ($(&quot;#idUrl&quot;).val ());"/>
					<outline text="}"/>
					</outline>
				<outline text="function lookForBookmarkletParams () {" created="Fri, 14 Jun 2013 15:29:20 GMT" pgfnum="26176">
					<outline text="if (url != &quot;null&quot;) { " created="Fri, 14 Jun 2013 15:20:39 GMT" pgfnum="26167">
						<outline text="}" created="Fri, 14 Jun 2013 15:20:51 GMT" pgfnum="26168"/>
						</outline>
					<outline text="}" created="Fri, 14 Jun 2013 15:29:28 GMT" pgfnum="26177"/>
					</outline>
				<outline text="function startup () {">
					<outline text="console.log (&quot;startup&quot;);"/>
					<outline text="$(&quot;#idVersion&quot;).html (&quot;&lt;a href=\&quot;&quot; + appConsts.docs + &quot;\&quot; target=\&quot;_blank\&quot;&gt;v&quot; + appConsts.version + &quot;&lt;/a&gt;&quot;);"/>
					<outline text=""/>
					<outline text="var url = getURLParameter (&quot;url&quot;);" created="Mon, 10 Jun 2013 18:31:25 GMT" pgfnum="25640"/>
					<outline text="if (url != &quot;null&quot;) { " created="Fri, 14 Jun 2013 15:20:39 GMT" pgfnum="26167">
						<outline text="$(&quot;#idUrl&quot;).val (url);"/>
						<outline text="viewJson (url);"/>
						<outline text="}" created="Fri, 14 Jun 2013 15:20:51 GMT" pgfnum="26168"/>
						</outline>
					<outline text="else {">
						<outline text="if (localStorage.urlOpmlFile !== undefined) {">
							<outline text="$(&quot;#idUrl&quot;).val (localStorage.urlOpmlFile);"/>
							<outline text="viewJson (localStorage.urlOpmlFile);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="self.setInterval (everySecond, 1000); "/>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				</outline>
			<outline text="index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;OPML to JSON converter&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/xml.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/shared/reader.js&quot;&gt;&lt;/script&gt;" isComment="true"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;"/>
						<outline text="&lt;style&gt;" created="Wed, 11 Sep 2013 14:27:45 GMT" pgfnum="30095">
							<outline text="body {">
								<outline text="font-family: Ubuntu;"/>
								<outline text="font-size: 18px;"/>
								<outline text="background-color: whitesmoke;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="width: 60%;"/>
								<outline text="margin-top: 60px;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="}"/>
								</outline>
							<outline text="input[type=&quot;text&quot;] {">
								<outline text="font-family: &quot;Ubuntu&quot;;"/>
								<outline text="font-size: 18px;"/>
								<outline text="padding: 5px;"/>
								<outline text="width: 100%;"/>
								<outline text="height: 2em;"/>
								<outline text="display: block;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divJsonView {">
								<outline text="display: none;"/>
								<outline text="margin-top: 15px;"/>
								<outline text="line-height: 120%;"/>
								<outline text="font-size: 16px;"/>
								<outline text="font-family: &quot;Ubuntu&quot;;"/>
								<outline text="margin-bottom: 400px;"/>
								<outline text="border: 1px solid silver;"/>
								<outline text="min-height: 400px;"/>
								<outline text="}"/>
								</outline>
							<outline text="pre {">
								<outline text="border: 0px;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divVersion {">
								<outline text="float: right;"/>
								<outline text="font-size: 12px;"/>
								<outline text="margin-top: -60px;"/>
								<outline text="padding-right: 10px;"/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/style&gt;" created="Wed, 11 Sep 2013 14:30:17 GMT" pgfnum="30105"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divVersion&quot; id=&quot;idVersion&quot;&gt;">
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;h1&gt;OPML to JSON converter&lt;/h1&gt;"/>
							<outline text="&lt;p&gt;Enter the URL of an OPML file:&lt;/p&gt;" isComment="true"/>
							<outline text="&lt;input type=&quot;text&quot; id=&quot;idUrl&quot; class=&quot;inputUrl&quot; placeholder=&quot;Enter the URL of an OPML file here.&quot;&gt;"/>
							<outline text="&lt;button class=&quot;btn btn-large btnUpdate&quot; type=&quot;button&quot; onclick=&quot;convertOpmlFile ();&quot;&gt;Submit&lt;/button&gt;" created="Tue, 06 May 2014 16:58:36 GMT" pgfnum="41161"/>
							<outline text=""/>
							<outline text="&lt;div class=&quot;divJsonView&quot; id=&quot;idJsonView&quot;&gt;">
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text=""/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildOpmlToJs ()"/>
			</outline>
		</body>
	</opml>
